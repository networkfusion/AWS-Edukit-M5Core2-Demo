# Copyright (c) NetworkFusion, .NET Foundation and Contributors
# See LICENSE file in the project root for full license information.

# This workflow will build push the sln to a hardware target.

name: self-hosted-linux-arm64 build and test

on: [push, pull_request]

defaults:
  run:
    shell: pwsh
    
jobs:
  build-solution:
    name: Build nanoFramework solution
    timeout-minutes: 15
    runs-on: [self-hosted, linux, ARM64] #TODO: needs other "labels" to ensure pre-requisites
    env:
      solution: 'AwsEdukitM5Core2.sln'
      buildPlatform: 'Any CPU'
      buildConfiguration: 'Release'
      GITHUB_TOKEN: ${{ github.token }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0


      - name: runner checks (to ensure commands are available)
        run: |
          pwsh
          exit
          nuget
          msbuild

      # TODO: should check nanoff is installed?
      # - name: check nanoff is up-to-date
      #   run: dotnet tool update -g nanoff

      # - name: Check target board is connected
      #   run: |
      #     nanoff --devicedetails --serialport xx # Foreach serialport? https://stackoverflow.com/questions/58548948/find-active-serial-ports-in-windows-subsystem-for-linux-wsl
      
      # TODO: not sure if this is sufficient as can suffer from reset (or locked port) issues
      # - name: Update target board
      #   run: nanoff --masserase --target M5Core2 --update --serialport COM16



      # not required on selfhost as already installed (and action cannot handle it).
      # - name: Install build components for nanoFramework
      #   uses: nanoframework/nanobuild@v1


      - name: Restore nuget packages
        run: nuget restore ${{ env.solution }} -ConfigFile NuGet.Config

      # Adjust secrets template to add SSID and PW (TODO: in future should be able to load from a template)
      - name: Use Secrets class template for tests
        run: Copy-Item './AwsEdukitM5Core2/Secrets.cs.template' -Destination './AwsEdukitM5Core2/Secrets.cs'

      # Adjust run settings for tests to run on real hardware.
      # - name: Adjust tests for targeting real hardware devices
      #   run: (Get-Content ./Tests/IntegrationTests/nano.runsettings -Raw) -Replace '<IsRealHardware>False</IsRealHardware>', '<IsRealHardware>True</IsRealHardware>' | Set-Content ./Tests/IntegrationTests/nano.runsettings
    

      - name: Build solution
        # TODO: We may need to install (or make sure) an arch compatible nf sdk extension (with path for `NanoFrameworkProjectSystemPath`) before this will work!
        # Check if https://raw.githubusercontent.com/networkfusion/nf-VSCodeExtension/networkfusion-test-vs2022/scripts/build.ps1 can help!
        # As a test, it was downloaded directly and using the static system path!
        # and exclude the buld config: /p:Configuration=${{ env.buildConfiguration }}
        run: msbuild ${{ env.solution }} /p:NanoFrameworkProjectSystemPath=~/nfExtension/nanoFramework.Tools.VS2022.Extension/$MSBuild/nanoFramework/v1.0/

      # - name: Run tests
      #   uses: microsoft/vstest-action@v0.1.0
      #   if: always()
      #   with:
      #     testAssembly: |
      #       **\NFUnitTest.dll
      #       **\*Test*.dll
      #       !**\obj\**
      #       !**\TestAdapter\**
      #       !**\NFUnitTest_DummyAdapter\**
      #       !**\nanoFramework.TestFramework\**
      #     searchFolder: ${{ github.workspace }}
      #     platform: ${{ env.BuildPlatform }}
      #     # vsTestVersion: 'latest'
      #     codeCoverageEnabled: false # TODO: using this will throw an exception...
      #     runSettingsFile: './Tests/IntegrationTests/nano.runsettings'

      # - name: Convert Test Report # TODO: requires a bash environment due to `git` command.
      #   uses: phoenix-actions/test-reporting@v6  # need to find a better action as a bit unstable.
      #   if: always()    # run this step even if previous step failed
      #   with:
      #     name: Test Results
      #     path: ./**/TestResults/*.trx
      #     reporter: 'dotnet-trx'
      #     fail-on-error: false

      # Self hosted runners need to cleanup after themselves. It is important as might have secrets!
      # TODO: this does not clean it up properly!
      - name: Cleanup Runner workspace path
        run: |
          Remove-Item -path ${{ github.workspace }}/* -Recurse
